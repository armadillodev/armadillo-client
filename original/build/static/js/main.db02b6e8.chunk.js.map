{"version":3,"sources":["features/sourceData/sourceDataSlice.ts","features/trailer/trailerSlice.ts","common/api.ts","App/store.ts","App/styles.js","features/trailer/trailer.js","App/AppBar.js","components/HomeButton.js","App/Sidebar.js","App/WorldView.js","features/bikeData/bikeGraphData.js","features/bikeData/bikeData.js","common/sumArray.js","components/PowerGraph.js","components/bike/BikePowerGraph.js","App/BikeListDashboard.js","components/trailer/TrailerDescription.js","features/ovenData/ovenGraphData.js","features/solarData/solarGraphData.js","components/TemperatureGraph.js","App/TrailerDashboard.js","components/oven/OvenDescription.js","App/OvenDashboard.js","components/SolarDescription.js","App/SolarDashboard.js","common/downloadData.ts","components/DownloadForm.tsx","App/ContentView.js","App/theme.js","App/App.js","serviceWorker.js","index.tsx"],"names":["DataType","idValidator","getIdMatch","id","match","length","console","error","Status","sourceDataSlice","createSlice","name","initialState","bike","oven","solar","reducers","pushData","state","action","payload","packet","assert","dataType","Bike","Oven","Solar","getType","dataId","Number","getId","dataSet","data","pop","clearData","actions","emptyArray","sourceDataSelector","type","sourceData","bikeDataSelector","ovenDataSelector","solarDataSelector","sourceDataListSelector","idList","dataList","i","push","bikeDataListSelector","response","ok","statusText","url","myFetch","a","fetch","res","status","json","getTrailerData","getServerTime","getSourceData","from","until","initialTrailerData","location","ovens","bikes","solars","Idle","trailerSlice","addData","removeData","Loading","loading","failed","Failed","success","Success","devTools","actionSanitizer","stateSanitizer","store","configureStore","reducer","trailer","trailerReducer","sourceDataReducer","useStyles","makeStyles","theme","root","display","appBar","width","marginLeft","backgroundColor","palette","primary","main","drawer","flexShrink","drawerPaper","homeLink","graphPaper","padding","spacing","toolbar","mixins","content","flexGrow","background","default","useTrailer","useSelector","ArmadilloAppBar","classes","title","AppBar","position","className","Toolbar","Typography","varient","noWrap","flexWrap","homeButton","alignItems","justifyContent","left","right","top","bottom","HomeButton","ButtonBase","component","NavLink","to","variant","ListItemLink","props","ListItem","button","exact","activeClassName","nodeListItem","idx","key","ListItemIcon","ListItemText","BikeListLink","DownloaderLink","Sidebar","useRouteMatch","map","List","Divider","createDrawer","Drawer","paper","anchor","renderTrailer","Link","WorldView","trailerList","useState","setTrailerList","useEffect","then","catch","useTrailerList","trailers","mapBikeGraphData","x","created_at","y","current","voltage","useBikeListGraphData","bikeIdList","bikeDataList","useBikeListData","setData","undefined","longestLength","longestIndex","sumArray","ySum","j","sum","sumArrays","bikeData","useBikeGraphData","bikeId","useBikeData","PowerGraph","useTheme","value","setValue","onNearestX","info","onMouseLeave","getX","d","Paper","disableHeight","height","xType","color","secondary","light","opacity","drag","enableY","BikePowerGraph","bike_id","bikeGraphData","BikeListDashboard","bike_graphs","Grid","item","xs","container","TrailerDescription","useOvenTemperatureGraphData","oven_id","temp","setTemp","entry","temperature","useSolarPowerGraphData","solarId","power","setPower","TemperatureGraph","yDomain","OvenData","trailerId","ovenId","tempData","SolarData","powerData","AggregateBikeData","TrailerDashboard","useParams","trailer_id","sm","md","OvenDescription","OvenDashboard","SolarDescription","solar_id","SolarDashboard","changedTarget","interval","downloadData","dispatch","rxjs","flat","pipe","mergeMap","subscriber","next","complete","fetchData","subscribe","err","newTrailer","innerLoop","log","window","setInterval","startLoop","DownloadForm","Date","fromDateTime","handleFromDateTime","untilDateTime","handleUntilDateTime","setId","req","setReq","host","onSubmit","event","preventDefault","Math","floor","getTime","open","required","placeholder","onChange","target","label","newDate","format","ContentView","useDispatch","getState","DataDownloader","path","createMuiTheme","App","ThemeProvider","CssBaseline","Boolean","hostname","ReactDOM","utils","DateFnsUtils","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.db02b6e8.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\n\nenum DataType {\n    Bike = 'bike',\n    Oven = 'oven',\n    Solar = 'solar',\n};\n\ntype DataPoint = BikeData | OvenData | SolarData;\n\ninterface BikeData {\n    id: number,\n    created_at: number,\n    current: number,\n    voltage: number,\n    rpm: number\n};\n\ninterface OvenData {\n    id: number,\n    created_at: number,\n    temperature: number,\n};\n\ninterface SolarData {\n    id: number,\n    created_at: number,\n    power: number,\n};\n\nexport type {BikeData, OvenData, SolarData, DataPoint};\n\ninterface DataState {\n    bike: {\n        [id: number]: Array<BikeData>,\n    },\n    oven: {\n        [id: number]: Array<OvenData>,\n    },\n    solar: {\n        [id: number]: Array<SolarData>,\n    },\n};\n\nconst idValidator = /^(bike|oven|solar)\\/([0-9]+)$/;\n\nfunction getIdMatch(id: string): Array<string> {\n    let match = id.match(idValidator);\n    if (match == null || match.length != 3) {\n        console.error(match);\n        console.error('invalid id %s', id);\n        return ['', '', ''];\n    } else {\n        return match;\n    }\n}\n\nfunction getType (id: string): DataType {\n    let dataType;\n    switch (getIdMatch(id)[1]) {\n        case \"bike\":\n            dataType = DataType.Bike;\n            break;\n        case \"oven\":\n            dataType = DataType.Oven;\n            break;\n        case \"solar\":\n            dataType = DataType.Solar;\n            break;\n        default:\n            dataType = DataType.Bike;\n    }\n    return dataType;\n}\n\nfunction getId (id: string): number {\n    let dataId = Number(getIdMatch(id)[2]);\n    return Number(dataId);\n}\n\nexport const sourceDataSlice = createSlice({\n    name: 'sourceData',\n    initialState: {\n        bike: [],\n        oven: [],\n        solar: [],\n    },\n    reducers: {\n        pushData: (state: DataState, action: {payload: {id: string, packet: any}}) => {\n            const {id, packet} = action.payload;\n\n            console.assert(packet);\n\n            // put new data at front of array\n            let dataType = getType(id); \n            let dataId = getId(id);\n            let dataSet = state[dataType];\n            let data = dataSet[dataId] || [];\n            data = [...packet, ...data];\n\n            // if the data is longer than 5 minutes entries, pop old data\n            const max_length = 60 * 5;\n            while (data.length > max_length) {\n                data.pop();\n            }\n\n            dataSet[dataId] = data;\n        },\n        clearData: (state: DataState) => {\n            state.bike = [];\n            state.oven = [];\n            state.solar = [];\n        }\n    },\n});\n\nexport const {pushData, clearData} = sourceDataSlice.actions;\n\n// this has to return the same empty array when fails because\n// [] != []\n// Returning a new [] instance causes\nconst emptyArray: Array<DataPoint> = [];\n\nconst sourceDataSelector = (type: DataType) => (id: number) => (state: any): Array<DataPoint> => {\n    return state.sourceData[type][id] || emptyArray; \n};\n\nexport const bikeDataSelector = sourceDataSelector(DataType.Bike);\nexport const ovenDataSelector = sourceDataSelector(DataType.Oven);\nexport const solarDataSelector = sourceDataSelector(DataType.Solar);\n\nconst sourceDataListSelector = (type: DataType) => (idList: Array<number>) => (state: any): Array<Array<DataPoint>> => {\n    let dataList = [];\n    for (let i = 0; i < idList.length; i++) {\n        dataList.push(state.sourceData[type][idList[i]] || emptyArray);\n    }\n\n    return dataList;\n};\n\nexport const bikeDataListSelector = sourceDataListSelector(DataType.Bike);\nexport const ovenDataListSelector = sourceDataListSelector(DataType.Oven);\nexport const solarDataListSelector = sourceDataListSelector(DataType.Solar);\n\nexport default sourceDataSlice.reducer;\n","import {createSlice} from '@reduxjs/toolkit';\nimport {getTrailerData} from '../../common/api';\nimport type {AppDispatch} from '../../App/store';\n\ninterface TrailerData {\n    name: string,\n    location: string,\n    bikes: Array<number>,\n    ovens: Array<number>,\n    solars: Array<number>,\n};\n\nexport type {TrailerData};\n\nenum Status {\n    Idle = 'idle',\n    Loading = 'loading',\n    Failed = 'failed',\n    Success = 'success',\n};\n\ninterface TrailerState {\n    status: Status,\n    data: TrailerData,\n}\n\nconst initialTrailerData = {\n    name: \"\",\n    location: \"\",\n    ovens: [],\n    bikes: [],\n    solars: [],\n};\n\nconst initialState = {\n    status: Status.Idle,\n    data: initialTrailerData\n};\n\nexport const trailerSlice = createSlice({\n    name: 'trailer',\n    initialState,\n    reducers: {\n        addData: (state: TrailerState, action) => {\n            let data = action.payload.data;\n            state.data = data;\n        },\n        removeData: (state: TrailerState) => {\n            state.data = initialTrailerData;\n            state.status = Status.Loading;\n        },\n        loading: (state: TrailerState) => {\n            state.status = Status.Loading;\n        },\n        failed: (state: TrailerState) => {\n            state.status = Status.Failed;\n        },\n        success: (state: TrailerState) => {\n            state.status = Status.Success;\n        },\n    },\n});\n\nexport const {addData, removeData, loading, failed, success} = trailerSlice.actions;\n\nexport const fetchTrailerData = (id: number) => async (dispatch: AppDispatch, getState: any) => {\n    const {status} = getState();\n    if (status === 'loading') return;\n\n    dispatch(loading());\n\n    const res = await getTrailerData(id);\n    if (!res.ok) {\n        console.error(res.statusText);\n        dispatch(failed());\n        return;\n    }\n\n    const data = res.data;\n\n    dispatch(addData({data}));\n    dispatch(success());\n};\n\nexport default trailerSlice.reducer;\n","import type {DataPoint} from '../features/sourceData/sourceDataSlice';\n\nconst apiEndPoint = '/api';\n\ninterface Response<T> {\n    data: T | null,\n    ok: boolean,\n    statusText: string,\n    url: string,\n};\n\nexport type {Response};\n\nconst response = <T>(data: T | null, ok: boolean, statusText: string, url: string): Response<T> => ({data, ok, statusText, url});\n\nconst myFetch= async <T>(url: string): Promise<Response<T>> => {\n    const res = await fetch(url);\n\n    if (res.status !== 200) {\n        return response<T>(null, false, res.statusText, res.url);\n    }\n\n    return response(await res.json(), true, '', res.url);\n};\n\nexport const getTrailerList = async () => {\n    return await myFetch<any>(`${apiEndPoint}/trailer`)\n};\n\nexport const getTrailerData = async (id: number) => {\n    return await myFetch<any>(`${apiEndPoint}/trailer/${id}`);\n};\n\nexport const getServerTime = async () => {\n    return await myFetch<number>(`${apiEndPoint}/time`);\n};\n\nexport const getSourceData = async (id: string, from: number, until: number) => {\n    // id in the format of `bike/bike_id`\n    return await myFetch<Array<DataPoint>>(`${apiEndPoint}/data/${id}?from=${from}&until=${until}`);\n};\n","import {configureStore} from '@reduxjs/toolkit';\nimport sourceDataReducer, {pushData} from '../features/sourceData/sourceDataSlice';\nimport trailerReducer from '../features/trailer/trailerSlice';\n\nconst actionSanitizer = (action: any) => (\n    action.type ===  pushData.type && action.payload.packet ? {\n        ...action,\n        payload: {\n            id: action.payload.id,\n            length: action.payload.packet.length,\n            packet: '<<LONG_BLOB>>',\n        }\n    }: action\n);\n\nconst devTools = {\n    actionSanitizer,\n    stateSanitizer: (state: any) => state.sourceData ? { ...state, sourceData: '<<LONG_BLOB>>' } : state\n};\n\nexport const store = configureStore({\n    reducer: {\n        trailer: trailerReducer,\n        sourceData: sourceDataReducer,\n    },\n    devTools,\n});\n\nexport type AppDispatch = typeof store.dispatch;\n","import {makeStyles} from '@material-ui/core/styles';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        backgroundColor: theme.palette.primary.main,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    homeLink: {\n        '&$selected': {\n            backgroundColor: 'blue',\n        },\n    },\n    graphPaper: {\n        padding: theme.spacing(2),\n    },\n    toolbar: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.default,\n        padding: theme.spacing(3),\n    },\n}));\n\nexport default useStyles;\n","import {useSelector} from 'react-redux';\n\n// will return null with error\nexport const useTrailer = () => {\n    const trailer = useSelector((state) => state.trailer);\n    if (trailer.status !== 'success') return null;\n\n    return trailer.data;\n};\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport useStyles from './styles';\nimport {useTrailer} from '../features/trailer/trailer';\n\nconst ArmadilloAppBar = () => {\n    const classes = useStyles();\n    const trailer = useTrailer();\n    \n    const title = trailer ? trailer.name : 'Armadillo';\n\n    return (\n        <div>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <Typography varient=\"h5\" noWrap>\n                    {title}\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default ArmadilloAppBar;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport Typography from '@material-ui/core/Typography';\nimport {NavLink} from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        ...theme.mixins.toolbar,\n        position: 'relative',\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    homeButton: {\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n    },\n}));\n\nconst HomeButton = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <ButtonBase className={classes.homeButton} component={NavLink} to='/'>\n                <Typography variant=\"h5\">World</Typography>\n            </ButtonBase>\n        </div>\n    );\n};\n\nexport default HomeButton;\n","import React from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport TrailerIcon from '@material-ui/icons/LocalShippingTwoTone';\nimport BikeIcon from '@material-ui/icons/DirectionsBike';\nimport GetApp from '@material-ui/icons/GetApp';\nimport Button from '@material-ui/core/Button';\nimport useStyles from './styles';\nimport {useTrailer} from '../features/trailer/trailer';\nimport {NavLink, useRouteMatch} from 'react-router-dom';\nimport HomeButton from '../components/HomeButton';\n\nconst ListItemLink = (props) => (\n    <ListItem button exact component={NavLink} activeClassName='Mui-selected' {...props} />\n);\n\nconst nodeListItem = (url, type) => (id, idx) => {\n    return (\n        <ListItemLink to={`${url}/${type}/${id}`} key={`${type}-${id}`}>\n            <ListItemIcon>\n                <BikeIcon />\n            </ListItemIcon>\n            <ListItemText primary={`${type} ${idx + 1}`} />\n        </ListItemLink>\n    );\n};\n\nconst BikeListLink = ({url}) => (\n    <ListItemLink to={`${url}/bike`} key={`bike-list`}>\n        <ListItemIcon>\n            <BikeIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Bikes'} />\n    </ListItemLink>\n);\n\nconst DownloaderLink = ({url}) => (\n    <ListItemLink to={`${url}/download`} key={`bike-list`}>\n        <ListItemIcon>\n            <GetApp />\n        </ListItemIcon>\n        <ListItemText primary={'Downloader'} />\n    </ListItemLink>\n);\n            \n\nconst createDrawer = (url, trailer) => {\n    const ovens = trailer.ovens.map(nodeListItem(url, 'oven'));\n    const solars= trailer.solars.map(nodeListItem(url, 'solar'));\n\n    return (\n        <List>\n            <ListItemLink to={`${url}/trailer`} key={'trailer'}>\n                <ListItemIcon>\n                    <TrailerIcon />\n                </ListItemIcon>\n                <ListItemText primary={trailer.name} />\n            </ListItemLink>\n\n            <Divider />\n            <BikeListLink url={url} />\n            <Divider />\n            {ovens}\n            <Divider />\n            {solars}\n            <Divider />\n            <DownloaderLink url={url} />\n        </List>\n    );\n};\n\n\nconst Sidebar = () => {\n    const match = useRouteMatch();\n    const classes = useStyles();\n\n    const trailer = useTrailer();\n\n    // if (org.status === 'loading') return \"loading\";\n    // if (org.status === 'failed') return \"failed to load dashboard\";\n    // if (org.status === 'idle') return \"there is an issue\";\n\n    let drawer;\n    if (trailer !== null) {\n        drawer = createDrawer(match.url, trailer);\n    } else {\n        drawer = \"\";\n    }\n\n    return (\n        <div>\n            <Drawer\n                className={classes.drawer}\n                variant='permanent'\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n                anchor=\"left\"\n            >\n                <div className={classes.toolbar}>\n                    <HomeButton />\n                </div>\n                {drawer}\n            </Drawer>\n        </div>\n    );\n};\n\nexport default Sidebar;\n","import React, {useState, useEffect} from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {Link} from 'react-router-dom';\n\nconst renderTrailer = (trailer) => {\n    return (\n        <ListItem button component={Link} to={`/${trailer.id}`} key={trailer.id}>\n            <ListItemText primary={trailer.name} />\n        </ListItem>\n    );\n};\n\nconst useTrailerList = () => {\n    const [trailerList, setTrailerList] = useState(null);\n\n    useEffect(() => {\n        fetch('/api/trailer')\n            .then((res) => res.json())\n            .then((trailerList) => setTrailerList(trailerList))\n            .catch(setTrailerList(null));\n    }, []);\n\n    return trailerList;\n};\n\nconst WorldView = () => {\n    let trailerList = useTrailerList();\n\n    if (trailerList == null) {\n        return 'failed to connect to database';\n    }\n\n    const trailers = trailerList.map(renderTrailer);\n\n    return <List>{trailers}</List>;\n};\n\nexport default WorldView;\n","import {useState, useEffect} from 'react';\nimport {useBikeData, useBikeListData} from './bikeData';\nimport {sumArrays} from '../../common/sumArray';\n\n\nconst mapBikeGraphData = (bike) => ({\n    x: bike.created_at, // time\n    y: bike.current * bike.voltage, // power\n});\n\nexport const useBikeListGraphData = (bikeIdList) => {\n    const bikeDataList = useBikeListData(bikeIdList);\n\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        setData(sumArrays(bikeDataList.map(bikeData => bikeData.map(mapBikeGraphData))));\n    }, bikeDataList);\n\n    return data;\n};\n\nexport const useBikeGraphData = (bikeId) => {\n    // assume that the data is valid since this component should only render when the data is present.\n    const bikeData = useBikeData(bikeId);\n\n    const [data, setData] = useState([]);\n    //\n    // only recalculate when new data is avaliable.\n    useEffect(() => setData(bikeData.map(mapBikeGraphData)), [bikeData]);\n\n    return data;\n};\n","import {bikeDataSelector, bikeDataListSelector} from '../sourceData/sourceDataSlice';\nimport {useSelector} from 'react-redux';\n\nexport const useBikeData = (bikeId) => {\n    let bikeData = useSelector(bikeDataSelector(bikeId));\n    return bikeData;\n};\n\nexport const useBikeListData = (bikeIdList) => {\n    let bikeDataList = useSelector(bikeDataListSelector(bikeIdList));\n    return bikeDataList;\n};\n","export const sumArrays = (data) => {\n    // expects a list of arrays\n    console.assert(data[0] !== undefined);\n\n    // use longest array\n    let longestLength = -1;\n    let longestIndex = -1;\n\n    for (let i = 0; i < data.length; i++) {\n        if (data[i].length > longestLength) {\n            longestLength = data[i].length;\n            longestIndex = i;\n        }\n    }\n\n    let sumArray = [];\n    for (let i = 0; i < longestLength; i++) {\n        let ySum = 0;\n        for (let j = 0; j < data.length; j++) {\n            if (data[j][i] === undefined) continue;\n            ySum += data[j][i].y || 0;\n        }\n        let sum = {\n            y: ySum,\n            x: data[longestIndex][i].x,\n        };\n        sumArray.push(sum);\n    }\n\n    return sumArray;\n};\n","import React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    VerticalGridLines,\n    HorizontalGridLines,\n    AreaSeries,\n    LineSeries,\n    Hint,\n    Highlight,\n} from 'react-vis';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport useStyles from '../App/styles';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@material-ui/core/styles';\n\n\nconst PowerGraph = ({data, title}) => {\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const [value, setValue] = useState(false);\n\n    const onNearestX = (value, info)=> {\n        setValue(value);\n    };\n\n    const onMouseLeave = () => {\n        setValue(false);\n    };\n\n    const getX = (d) => {\n        return d.x * 1000;\n    };\n\n    return (\n        <Paper className={classes.graphPaper}>\n            <Typography variant=\"h5\">{title}</Typography>\n            <AutoSizer disableHeight>\n                {({width}) => (\n                    <XYPlot getX={getX} onMouseLeave={onMouseLeave} height={250} width={width} xType=\"time\">\n                        <XAxis />\n                        <YAxis />\n                        <VerticalGridLines />\n                        <HorizontalGridLines />\n\n                        <AreaSeries\n                            data={data}\n                            color={theme.palette.secondary.light}\n                            opacity={0.6}\n                        />\n                        <LineSeries\n                            data={data}\n                            color={theme.palette.secondary.main}\n                            onNearestX={onNearestX}\n                        />\n                        <Highlight\n                            drag\n                            enableY={false}\n                        />\n                        {value ? <Hint value={value} /> : null}\n                    </XYPlot>\n                )}\n            </AutoSizer>\n        </Paper>\n    );\n};\n\nPowerGraph.propTypes = {\n    data: PropTypes.array,\n};\n\nexport default PowerGraph;\n","import React from 'react';\nimport {useBikeGraphData} from '../../features/bikeData/bikeGraphData';\nimport PowerGraph from '../PowerGraph';\n\nconst BikePowerGraph = ({bike_id}) => {\n    const bikeGraphData = useBikeGraphData(bike_id);\n\n    return (\n        <PowerGraph data={bikeGraphData} title={\"Bike Power\"} />\n    );\n};\n\nexport default BikePowerGraph;\n","import React from 'react';\nimport BikePowerGraph from '../components/bike/BikePowerGraph';\nimport Grid from '@material-ui/core/Grid';\nimport {useTrailer} from '../features/trailer/trailer';\n\nconst BikeListDashboard = () => {\n    const trailer = useTrailer();\n\n    if (trailer === null) return \"No Data\";\n\n    let bike_graphs = [];\n    for (let i = 0; i < trailer.bikes.length; i++) {\n        bike_graphs.push(\n            <Grid item xs={12}>\n                <BikePowerGraph bike_id={trailer.bikes[i]} />\n            </Grid>\n        );\n    }\n\n    return (\n        <div>\n            <Grid container spacing={3}>\n                {bike_graphs}\n            </Grid>\n        </div>\n    );\n};\n\nexport default BikeListDashboard;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport useStyles from '../../App/styles';\nimport {useTrailer} from '../../features/trailer/trailer';\n\nconst TrailerDescription = () => {\n    const classes = useStyles();\n    let trailer = useTrailer();\n\n    if (trailer === null) return 'No data';\n\n    return (\n        <Paper className={classes.graphPaper}>\n            <Typography>\n                Name: {trailer.name}\n            </Typography>\n            <Typography>\n                Location: {trailer.location}\n            </Typography>\n        </Paper>\n    );\n};\n\nexport default TrailerDescription;\n","import {useState, useEffect} from 'react';\nimport {useSelector} from 'react-redux';\nimport {ovenDataSelector} from '../sourceData/sourceDataSlice';\n\nexport const useOvenTemperatureGraphData = (oven_id) => {\n    const data = useSelector(ovenDataSelector(oven_id));\n\n    const [temp, setTemp] = useState([]);\n\n    useEffect(() => {\n        setTemp(data.map((entry) => ({\n            x: entry.created_at,\n            y: entry.temperature,\n        })));\n    }, [data]);\n\n    return temp;\n};\n","import {useState, useEffect} from 'react';\nimport {useSelector} from 'react-redux';\nimport {solarDataSelector} from '../sourceData/sourceDataSlice';\n\nexport const useSolarPowerGraphData = (solarId) => {\n    const data = useSelector(solarDataSelector(solarId));\n    const [power, setPower] = useState([]);\n\n    useEffect(() => {\n        setPower(data.map((entry) => ({\n            x: entry.created_at,\n            y: entry.power,\n        })));\n    }, [data]);\n\n    return power;\n}\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    VerticalGridLines,\n    HorizontalGridLines,\n    LineSeries,\n} from 'react-vis';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport useStyles from '../App/styles';\nimport PropTypes from 'prop-types';\n\nconst TemperatureGraph = ({ data, title }) => {\n    const classes = useStyles();\n\n    if (data == null) {\n        return (\n            <Typography>No Data</Typography>\n        );\n    }\n\n    const getX = (d) => {\n        return d.x * 1000;\n    };\n\n    return (\n        <Paper className={classes.graphPaper}>\n            <Typography variant=\"h5\">{title}</Typography>\n            <AutoSizer disableHeight>\n                {({width}) => (\n                    <XYPlot getX={getX} height={250} width={width} yDomain={[0, 100]} xType=\"time\">\n                        <VerticalGridLines />\n                        <HorizontalGridLines />\n                        <XAxis />\n                        <YAxis />\n\n                        <LineSeries data={data} />\n                    </XYPlot>\n                )}\n            </AutoSizer>\n        </Paper>\n    );\n};\n\nTemperatureGraph.propTypes = {\n    data: PropTypes.array,\n};\n\nexport default TemperatureGraph;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {useParams} from 'react-router-dom';\nimport TrailerDescription from '../components/trailer/TrailerDescription';\nimport { useTrailer } from '../features/trailer/trailer';\nimport { useBikeListGraphData } from '../features/bikeData/bikeGraphData';\nimport { useOvenTemperatureGraphData} from '../features/ovenData/ovenGraphData';\nimport { useSolarPowerGraphData} from '../features/solarData/solarGraphData';\nimport PowerGraph from '../components/PowerGraph';\nimport TemperatureGraph from '../components/TemperatureGraph';\n\nconst OvenData = ({ trailerId }) => {\n    const trailer = useTrailer(trailerId);\n    const ovenId = trailer.ovens[0];\n    const tempData = useOvenTemperatureGraphData(ovenId);\n\n    return (<TemperatureGraph data={tempData} title={\"Oven Temperature\"} />);\n};\n\nconst SolarData = ({ trailerId }) => {\n    const trailer = useTrailer(trailerId);\n    const solarId = trailer.solars[0];\n    const powerData = useSolarPowerGraphData(solarId);\n\n    return (\n        <PowerGraph data={powerData} title={\"Solar Power\"} />\n    );\n};\n\nconst AggregateBikeData = ({ trailerId }) => {\n    const trailer = useTrailer(trailerId);\n\n    const bikeGraphData = useBikeListGraphData(trailer.bikes);\n\n    return (\n        <PowerGraph data={bikeGraphData} title={\"Bike Data\"} />\n    );\n}\n\nconst TrailerDashboard = () => {\n    const trailerId = Number(useParams().trailer_id);\n    const trailer = useTrailer(trailerId);\n\n    if (trailer === null) return \"No Data\";\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <TrailerDescription trailer_id={trailerId} />\n            </Grid>\n            <Grid container item spacing={1}>\n                <Grid item sm={12} md={4} key={'bike'}>\n                    <AggregateBikeData trailerId={trailerId} />\n                </Grid>\n                <Grid item sm={12} md={4} key={'solar'}>\n                    <SolarData trailerId={trailerId} />\n                </Grid>\n                <Grid item sm={12} md={4} key={'oven'}>\n                    <OvenData trailerId={trailerId} />\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default TrailerDashboard;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport useStyles from '../../App/styles';\nimport PropTypes from 'prop-types';\n\nconst OvenDescription = ({oven_id}) => {\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.graphPaper}>\n            <Typography>\n                Oven: {oven_id}\n            </Typography>\n        </Paper>\n    );\n};\n\nOvenDescription.propTypes = {\n    oven_id: PropTypes.number,\n};\n\nexport default OvenDescription;\n","import React, {useEffect, useState} from 'react';\nimport TemperatureGraph from '../components/TemperatureGraph';\nimport OvenDescription from '../components/oven/OvenDescription';\nimport Grid from '@material-ui/core/Grid';\nimport {useParams} from 'react-router-dom';\nimport {useOvenTemperatureGraphData} from '../features/ovenData/ovenGraphData';\n\nconst OvenDashboard = () => {\n    const oven_id = Number(useParams().oven_id);\n\n    const temp = useOvenTemperatureGraphData(oven_id);\n\n    return (\n        <div>\n            <Grid container spacing={3}>\n                <Grid item xs={3}>\n                    <OvenDescription oven_id={oven_id} />\n                </Grid>\n                <Grid item xs={12}>\n                    <TemperatureGraph data={temp} title={\"Oven Temperature\"} />\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n\nexport default OvenDashboard;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport useStyles from '../App/styles';\nimport PropTypes from 'prop-types';\n\nconst SolarDescription = ({solar_id}) => {\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.graphPaper}>\n            <Typography>\n                Solar Microgrid: {solar_id}\n            </Typography>\n        </Paper>\n    );\n};\n\nSolarDescription.propTypes = {\n    solar_id: PropTypes.number,\n};\n\nexport default SolarDescription;\n","import React, {useEffect, useState} from 'react';\nimport PowerGraph from '../components/PowerGraph';\nimport SolarDescription from '../components/SolarDescription';\nimport Grid from '@material-ui/core/Grid';\nimport {useParams} from 'react-router-dom';\nimport {useSolarPowerGraphData} from '../features/solarData/solarGraphData';\n\nconst SolarDashboard = () => {\n    const solar_id = Number(useParams().solar_id);\n\n    const power = useSolarPowerGraphData(solar_id);\n\n    return (\n        <div>\n            <Grid container spacing={3}>\n                <Grid item xs={3}>\n                    <SolarDescription solar_id={solar_id} />\n                </Grid>\n                <Grid item xs={12}>\n                    <PowerGraph data={power} title={\"Solar Data\"} />\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n\nexport default SolarDashboard;\n","import {pushData, clearData} from '../features/sourceData/sourceDataSlice';\nimport * as rxjs from 'rxjs';\nimport {mergeMap} from 'rxjs/operators';\nimport {getServerTime, getSourceData} from './api';\nimport type {DataPoint} from '../features/sourceData/sourceDataSlice';\nimport type {AppDispatch} from '../App/store';\nimport type {TrailerData} from '../features/trailer/trailerSlice';\n\nconst getDataIds = (trailer: TrailerData) => ([\n    trailer.bikes.map((bike) => `bike/${bike}`),\n    trailer.ovens.map((oven) => `oven/${oven}`),\n    trailer.solars.map((solar) => `solar/${solar}`),\n]).flat();\n\nconst fetchData = (from: number, until: number) => (id: string) => new rxjs.Observable<[string, Array<DataPoint>]>(subscriber => {\n    getSourceData(id, from, until)\n        .then(res => {\n            if (res.ok) {\n                subscriber.next([id, <Array<DataPoint>>res.data]);\n            } else {\n                console.error(res.statusText);\n            }\n            subscriber.complete();\n        });\n});\n\nlet trailer: TrailerData | null = null;\nlet changedTarget = false;\nlet interval: number | null = null;\n\nconst downloadData = (dispatch: AppDispatch, from: number, until: number) => {\n    // can't do anything if there is no data.\n    if (trailer === null) return;\n\n    // fetch initial data for bikes\n    const trailerData = rxjs.from(getDataIds(trailer))\n        .pipe(\n            mergeMap(fetchData(from, until))\n        );\n\n    trailerData.subscribe(\n        (res: [string, Array<DataPoint>]) => dispatch(pushData({id: res[0], packet: res[1]})),\n        err => console.error(err),\n    );\n}\n\nconst start = (newTrailer: TrailerData, dispatch: AppDispatch) => {\n    trailer = newTrailer;\n    changedTarget = true;\n\n    if (interval !== null) return;\n\n    let startLoop = async () => {\n        let until = <number>((await getServerTime()).data);\n        let from = until;\n        let innerLoop = async () => {\n            if (changedTarget) {\n                changedTarget = false;\n                dispatch(clearData());\n                console.log('changed target to %s', trailer);\n                from = until - (60 * 5);\n            }\n            if (trailer !== null) {\n                downloadData(dispatch, from, until);\n                from = until;\n                until = <number>((await getServerTime()).data);\n            }\n        };\n        innerLoop();\n        interval = window.setInterval(innerLoop, 1000);\n    };\n\n    startLoop();\n};\n\nconst stop = () => {\n    console.log('stopping downloader');\n    trailer = null;\n};\n\nexport default {\n    start, stop\n};\n","import * as React from 'react';\nimport {useState} from 'react';\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\n\ninterface IForm {\n    id: string,\n    from_date: string,\n    from_time: string,\n    until_date: string,\n    until_time: string,\n};\n\ninterface IFormEvent {\n    preventDefault: () => void,\n};\n\nconst DownloadForm = () => {\n    const [fromDateTime, handleFromDateTime] = useState<Date | null>(new Date());\n    const [untilDateTime, handleUntilDateTime] = useState<Date | null>(new Date());\n    const [id, setId] = useState<string>('');\n    const [req, setReq] = useState<string>('');\n\n    const handleIdChange = (event: any)=> {\n        setId(event.target.value);\n    };\n\n    const handleSubmit = (event: IFormEvent) => {\n        event.preventDefault();\n        if (fromDateTime != null && untilDateTime != null) {\n            let from = Math.floor(fromDateTime.getTime()/1000);\n            let until = Math.floor(untilDateTime.getTime()/1000);\n            console.log(id, from, until);\n\n            let url = `/api/data/${id}/csv?from=${from}&until=${until}`;\n\n            window.open(url, '_blank');\n            setReq(url);\n        }\n    }\n\n    return (\n    <>\n        <code>{window.location.host + req}</code>\n        <form onSubmit={handleSubmit}>\n            <h3>Downloader</h3>\n            <label>\n                ID: \n                <input required name=\"id\" placeholder=\"<type>/<id>\" value={id} onChange={handleIdChange} />\n            </label>\n\n            <br />\n\n            <KeyboardDateTimePicker\n                required\n                variant=\"inline\"\n                label=\"from\"\n                value={fromDateTime}\n                onChange={newDate => handleFromDateTime(newDate)}\n                format=\"yyyy/MM/dd HH:mm\"\n            />\n\n            <br />\n\n            <KeyboardDateTimePicker\n                required\n                variant=\"inline\"\n                label=\"until\"\n                value={untilDateTime}\n                onChange={newDate => handleUntilDateTime(newDate)}\n                format=\"yyyy/MM/dd HH:mm\"\n            />\n\n            <br />\n\n            <input type=\"submit\" />\n        </form>\n    </>\n    );\n};\n\nexport default DownloadForm;\n","import React, {useState, useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {fetchTrailerData, removeData} from '../features/trailer/trailerSlice';\nimport BikeListDashboard from './BikeListDashboard';\nimport TrailerDashboard from './TrailerDashboard';\nimport OvenDashboard from './OvenDashboard';\nimport SolarDashboard from './SolarDashboard';\nimport {\n    Switch,\n    Route,\n    Redirect,\n    useParams,\n} from 'react-router-dom';\nimport DataDownloader from '../common/downloadData';\nimport DownloadForm from '../components/DownloadForm';\n\nconst ContentView = () => {\n    const {trailer_id} = useParams();\n    const dispatch = useDispatch();\n    const trailer = useSelector((state) => state.trailer.data);\n\n    // dispatch org data request\n    useEffect(() => {\n        dispatch(fetchTrailerData(trailer_id));\n\n        return () => {\n            dispatch(removeData());\n        };\n    }, [trailer_id, dispatch]);\n\n    useEffect(() => {\n        DataDownloader.start(trailer, dispatch);\n\n        return () => {\n            DataDownloader.stop();\n        };\n    }, [trailer_id, trailer, dispatch]);\n\n    return (\n        <Switch>\n            <Route exact path={`/${trailer_id}`}>\n                <Redirect to={`/${trailer_id}/trailer`} />\n            </Route>\n            <Route path={`/${trailer_id}/trailer`}>\n                <TrailerDashboard />\n            </Route>\n            <Route path={`/${trailer_id}/bike`}>\n                <BikeListDashboard />\n            </Route>\n            <Route path={`/${trailer_id}/oven/:oven_id`}>\n                <OvenDashboard />\n            </Route>\n            <Route path={`/${trailer_id}/solar/:solar_id`}>\n                <SolarDashboard />\n            </Route>\n            <Route path={`/${trailer_id}/download`}>\n                <DownloadForm />\n            </Route>\n        </Switch>\n    );\n};\n\nexport default ContentView;\n","import {createMuiTheme} from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#ff9100',\n        },\n        secondary: {\n            main: '#00796b',\n        },\n    },\n});\n\nexport default theme;\n","import React from 'react';\nimport './App.css';\nimport ArmadilloAppBar from './AppBar';\nimport Sidebar from './Sidebar';\nimport useStyles from './styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport WorldView from './WorldView';\nimport ContentView from './ContentView';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from 'react-router-dom';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport theme from './theme';\n\nconst App = () => {\n    const classes = useStyles();\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Router>\n                <div className={classes.root}>\n                    <CssBaseline />\n                    <ArmadilloAppBar />\n                    <Switch>\n                        <Route exact path='/'>\n                            <Sidebar />\n                            <main className={classes.content}>\n                                <div className={classes.toolbar}></div>\n                                <WorldView />\n                            </main>\n                        </Route>\n                        <Route path='/:trailer_id'>\n                            <Sidebar />\n                            <main className={classes.content}>\n                                <div className={classes.toolbar}></div>\n                                <ContentView />\n                            </main>\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        </ThemeProvider>\n    );\n};\n\nexport {App};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport './index.css';\nimport '../node_modules/react-vis/dist/style.css';\n\nimport {Provider} from 'react-redux';\nimport {store} from './App/store';\n\nimport {App} from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </MuiPickersUtilsProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}